{"ast":null,"code":"var _jsxFileName = \"/Users/joshuaarias/Documents/the-app/frontend/src/context/ForumContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ForumContext = /*#__PURE__*/createContext();\nexport const ForumProvider = ({\n  children\n}) => {\n  _s();\n  const [threads, setThreads] = useState([]);\n  const [currentThread, setCurrentThread] = useState(null);\n  const [sortBy, setSortBy] = useState('created');\n  const fetchThreads = async () => {\n    try {\n      const response = await fetch(`http://localhost:5001/api/threads?sort=${sortBy}`);\n      if (!response.ok) {\n        throw new Error('Något gick fel vid hämtning av trådar');\n      }\n      const data = await response.json();\n      setThreads(Array.isArray(data) ? data : []);\n    } catch (error) {\n      console.error('Fel vid hämtning av trådar:', error);\n      setThreads([]);\n    }\n  };\n  const fetchThread = async id => {\n    try {\n      const response = await fetch(`http://localhost:5001/api/threads/${id}`);\n      if (!response.ok) {\n        throw new Error('Något gick fel vid hämtning av tråden');\n      }\n      const data = await response.json();\n      setCurrentThread(data);\n    } catch (error) {\n      console.error('Fel vid hämtning av tråd:', error);\n    }\n  };\n  const createThread = async (title, content) => {\n    try {\n      const response = await fetch('http://localhost:5001/api/threads', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          title,\n          content\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Något gick fel vid skapande av tråd');\n      }\n      const data = await response.json();\n      await fetchThreads();\n      return data;\n    } catch (error) {\n      console.error('Fel vid skapande av tråd:', error);\n      throw error;\n    }\n  };\n  const createReply = async (threadId, content) => {\n    try {\n      const response = await fetch(`http://localhost:5001/api/threads/${threadId}/replies`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          content\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Något gick fel vid skapande av svar');\n      }\n      const data = await response.json();\n      await fetchThread(threadId);\n      await fetchThreads();\n      return data;\n    } catch (error) {\n      console.error('Fel vid skapande av svar:', error);\n      throw error;\n    }\n  };\n  useEffect(() => {\n    fetchThreads();\n  }, [sortBy]);\n  return /*#__PURE__*/_jsxDEV(ForumContext.Provider, {\n    value: {\n      threads,\n      currentThread,\n      sortBy,\n      setSortBy,\n      fetchThreads,\n      fetchThread,\n      createThread,\n      createReply\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n_s(ForumProvider, \"+arC3sE5zckJnxt26YnXmkbhH4o=\");\n_c = ForumProvider;\nexport const useForum = () => {\n  _s2();\n  return useContext(ForumContext);\n};\n_s2(useForum, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"ForumProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","ForumContext","ForumProvider","children","_s","threads","setThreads","currentThread","setCurrentThread","sortBy","setSortBy","fetchThreads","response","fetch","ok","Error","data","json","Array","isArray","error","console","fetchThread","id","createThread","title","content","method","headers","body","JSON","stringify","createReply","threadId","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useForum","_s2","$RefreshReg$"],"sources":["/Users/joshuaarias/Documents/the-app/frontend/src/context/ForumContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\n\nconst ForumContext = createContext();\n\nexport const ForumProvider = ({ children }) => {\n  const [threads, setThreads] = useState([]);\n  const [currentThread, setCurrentThread] = useState(null);\n  const [sortBy, setSortBy] = useState('created');\n\n  const fetchThreads = async () => {\n    try {\n      const response = await fetch(`http://localhost:5001/api/threads?sort=${sortBy}`);\n      if (!response.ok) {\n        throw new Error('Något gick fel vid hämtning av trådar');\n      }\n      const data = await response.json();\n      setThreads(Array.isArray(data) ? data : []);\n    } catch (error) {\n      console.error('Fel vid hämtning av trådar:', error);\n      setThreads([]);\n    }\n  };\n\n  const fetchThread = async (id) => {\n    try {\n      const response = await fetch(`http://localhost:5001/api/threads/${id}`);\n      if (!response.ok) {\n        throw new Error('Något gick fel vid hämtning av tråden');\n      }\n      const data = await response.json();\n      setCurrentThread(data);\n    } catch (error) {\n      console.error('Fel vid hämtning av tråd:', error);\n    }\n  };\n\n  const createThread = async (title, content) => {\n    try {\n      const response = await fetch('http://localhost:5001/api/threads', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ title, content }),\n      });\n      if (!response.ok) {\n        throw new Error('Något gick fel vid skapande av tråd');\n      }\n      const data = await response.json();\n      await fetchThreads();\n      return data;\n    } catch (error) {\n      console.error('Fel vid skapande av tråd:', error);\n      throw error;\n    }\n  };\n\n  const createReply = async (threadId, content) => {\n    try {\n      const response = await fetch(`http://localhost:5001/api/threads/${threadId}/replies`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ content }),\n      });\n      if (!response.ok) {\n        throw new Error('Något gick fel vid skapande av svar');\n      }\n      const data = await response.json();\n      await fetchThread(threadId);\n      await fetchThreads();\n      return data;\n    } catch (error) {\n      console.error('Fel vid skapande av svar:', error);\n      throw error;\n    }\n  };\n\n  useEffect(() => {\n    fetchThreads();\n  }, [sortBy]);\n\n  return (\n    <ForumContext.Provider\n      value={{\n        threads,\n        currentThread,\n        sortBy,\n        setSortBy,\n        fetchThreads,\n        fetchThread,\n        createThread,\n        createReply,\n      }}\n    >\n      {children}\n    </ForumContext.Provider>\n  );\n};\n\nexport const useForum = () => useContext(ForumContext); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}